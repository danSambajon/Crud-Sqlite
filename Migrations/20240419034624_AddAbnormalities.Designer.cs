// <auto-generated />
using System;
using Crud_Sqlite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Crud_Sqlite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240419034624_AddAbnormalities")]
    partial class AddAbnormalities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Crud_Sqlite.Models.Abnormalities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Abnormality")
                        .HasColumnType("REAL");

                    b.Property<double>("Closing")
                        .HasColumnType("REAL");

                    b.Property<double>("ClosingZip")
                        .HasColumnType("REAL");

                    b.Property<string>("INV_DATE")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Opening")
                        .HasColumnType("REAL");

                    b.Property<double>("OpeningZip")
                        .HasColumnType("REAL");

                    b.Property<string>("ParticularsC")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParticularsO")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("XPump")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Abnormalities");
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbBackup", b =>
                {
                    b.Property<string>("PosBitmap")
                        .HasColumnType("CHAR(12)")
                        .HasColumnName("POS_BITMAP");

                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<int?>("PosColor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_COLOR");

                    b.Property<int?>("PosFcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FCODE");

                    b.Property<int?>("PosFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FLAG");

                    b.Property<int?>("PosFntcolor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FNTCOLOR");

                    b.Property<string>("PosFntname")
                        .HasColumnType("CHAR(31)")
                        .HasColumnName("POS_FNTNAME");

                    b.Property<int?>("PosFntsize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FNTSIZE");

                    b.Property<int?>("PosFntstyle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FNTSTYLE");

                    b.Property<int?>("PosHeight")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_HEIGHT");

                    b.Property<int?>("PosLeft")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_LEFT");

                    b.Property<int?>("PosSecurity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SECURITY");

                    b.Property<int?>("PosSfcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SFCODE");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.Property<string>("PosText")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_TEXT");

                    b.Property<int?>("PosTop")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_TOP");

                    b.Property<int?>("PosWidth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_WIDTH");

                    b.ToTable("db_Backup", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbCAddr", b =>
                {
                    b.Property<string>("VipBario")
                        .HasColumnType("CHAR(30)")
                        .HasColumnName("VIP_BARIO");

                    b.Property<string>("VipCity")
                        .HasColumnType("CHAR(30)")
                        .HasColumnName("VIP_CITY");

                    b.Property<string>("VipCode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("VIP_CODE");

                    b.Property<int?>("VipHist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_HIST");

                    b.Property<string>("VipHseno")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("VIP_HSENO");

                    b.Property<string>("VipPhone")
                        .HasColumnType("CHAR(15)")
                        .HasColumnName("VIP_PHONE");

                    b.Property<string>("VipStreet")
                        .HasColumnType("CHAR(30)")
                        .HasColumnName("VIP_STREET");

                    b.Property<string>("VipZip")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("VIP_ZIP");

                    b.HasIndex(new[] { "VipCode", "VipHist" }, "db_c_addrsNDX");

                    b.ToTable("db_c_addrs", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbCBase", b =>
                {
                    b.Property<string>("VipCode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("VIP_CODE");

                    b.Property<string>("VipDatemodi")
                        .HasColumnType("CHAR(8)")
                        .HasColumnName("VIP_DATEMODI");

                    b.Property<string>("VipEmpid")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("VIP_EMPID");

                    b.Property<int?>("VipHist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_HIST");

                    b.Property<string>("VipPincode")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("VIP_PINCODE");

                    b.Property<string>("VipReason")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_REASON");

                    b.Property<string>("VipSitecode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("VIP_SITECODE");

                    b.Property<string>("VipStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_STATUS");

                    b.HasIndex(new[] { "VipCode", "VipHist" }, "db_c_baseNDX");

                    b.ToTable("db_c_base", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbCCard", b =>
                {
                    b.Property<string>("VipCardno")
                        .HasColumnType("CHAR(16)")
                        .HasColumnName("VIP_CARDNO");

                    b.Property<int?>("VipCardsts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_CARDSTS");

                    b.Property<int?>("VipFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_FLAG");

                    b.HasIndex(new[] { "VipCardno" }, "db_c_cardNDX");

                    b.ToTable("db_c_card", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbCName", b =>
                {
                    b.Property<string>("VipCode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("VIP_CODE");

                    b.Property<string>("VipFname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("VIP_FNAME");

                    b.Property<int?>("VipHist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_HIST");

                    b.Property<string>("VipLname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("VIP_LNAME");

                    b.Property<string>("VipMname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("VIP_MNAME");

                    b.Property<string>("VipSalute")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_SALUTE");

                    b.Property<string>("VipTin")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("VIP_TIN");

                    b.HasIndex(new[] { "VipCode", "VipHist" }, "db_c_nameNDX");

                    b.ToTable("db_c_name", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbCSl", b =>
                {
                    b.Property<string>("VipCode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("VIP_CODE");

                    b.Property<int?>("VipHist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_HIST");

                    b.Property<double?>("VipMvfc")
                        .HasColumnType("REAL")
                        .HasColumnName("VIP_MVFC");

                    b.Property<string>("VipPcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VIP_PCODE");

                    b.HasIndex(new[] { "VipCode", "VipHist" }, "db_c_slsNDX");

                    b.ToTable("db_c_sls", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbGDditm", b =>
                {
                    b.Property<int?>("DptCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_CODE");

                    b.Property<string>("DptDatacode")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("DPT_DATACODE");

                    b.Property<int?>("DptGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_GROUP");

                    b.Property<int?>("DptType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_TYPE");

                    b.HasIndex(new[] { "DptCode", "DptType", "DptGroup", "DptDatacode" }, "db_g_dditmNDX");

                    b.ToTable("db_g_dditm", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbGDept", b =>
                {
                    b.Property<int?>("DptCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_CODE");

                    b.Property<string>("DptDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("DPT_DESCRIPTION");

                    b.Property<int?>("DptType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_TYPE");

                    b.HasIndex(new[] { "DptCode", "DptType" }, "db_g_deptNDX");

                    b.ToTable("db_g_dept", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbGDptdtl", b =>
                {
                    b.Property<int?>("DptCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_CODE");

                    b.Property<string>("DptDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("DPT_DESCRIPTION");

                    b.Property<int?>("DptGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_GROUP");

                    b.Property<int?>("DptLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_LEVEL");

                    b.Property<int?>("DptNode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_NODE");

                    b.Property<int?>("DptType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_TYPE");

                    b.HasIndex(new[] { "DptCode", "DptType", "DptGroup" }, "db_g_dptdtlNDX");

                    b.ToTable("db_g_dptdtl", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIBcode", b =>
                {
                    b.Property<string>("InvBarcode")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("INV_BARCODE");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.HasIndex(new[] { "InvItemcodex", "InvBarcode" }, "db_i_bcodeNDX");

                    b.ToTable("db_i_bcode", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIBdttl", b =>
                {
                    b.Property<string>("InvCode")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_CODE");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvTtltype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_TTLTYPE");

                    b.HasIndex(new[] { "InvCode", "InvItemcodex", "InvTtltype" }, "db_i_bdttlNDX");

                    b.ToTable("db_i_bdttl", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIBom", b =>
                {
                    b.Property<string>("InvCode")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_CODE");

                    b.Property<string>("InvDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("INV_DESCRIPTION");

                    b.Property<string>("InvKind")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("INV_KIND");

                    b.Property<double?>("InvYield")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_YIELD");

                    b.HasIndex(new[] { "InvCode" }, "db_i_bomNDX");

                    b.ToTable("db_i_bom", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIBomdtl", b =>
                {
                    b.Property<string>("InvCode")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_CODE");

                    b.Property<int?>("InvFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_FLAG");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<double?>("InvQty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_QTY");

                    b.Property<int?>("InvUom")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_UOM");

                    b.Property<double?>("InvUsage")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_USAGE");

                    b.HasIndex(new[] { "InvCode", "InvItemcodex" }, "db_i_bomdtlNDX");

                    b.ToTable("db_i_bomdtl", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIBuom", b =>
                {
                    b.Property<string>("InvCode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("INV_CODE");

                    b.Property<double?>("InvFactor")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_FACTOR");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvUom")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_UOM");

                    b.HasIndex(new[] { "InvCode", "InvItemcodex", "InvUom" }, "db_i_buomNDX");

                    b.ToTable("db_i_buom", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbICond", b =>
                {
                    b.Property<int?>("InvFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_FLAG");

                    b.Property<int?>("InvGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_GROUP");

                    b.Property<string>("InvItemcode")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("INV_ITEMCODE");

                    b.HasIndex(new[] { "InvItemcode" }, "db_i_condNDX");

                    b.ToTable("db_i_cond", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIDir", b =>
                {
                    b.Property<string>("InvDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("INV_DESCRIPTION");

                    b.Property<int?>("InvDir")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_DIR");

                    b.HasIndex(new[] { "InvDir" }, "db_i_dirNDX");

                    b.ToTable("db_i_dir", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIItem", b =>
                {
                    b.Property<int?>("InvFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_FLAG");

                    b.Property<string>("InvItemcode")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("INV_ITEMCODE");

                    b.Property<int?>("InvModigrp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_MODIGRP");

                    b.Property<string>("InvType")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("INV_TYPE");

                    b.Property<int?>("PosFormat")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FORMAT");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.HasIndex(new[] { "InvItemcode" }, "db_i_itemNDX");

                    b.ToTable("db_i_item", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIIteml", b =>
                {
                    b.Property<int?>("InvGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_GROUP");

                    b.Property<int?>("InvId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_ID");

                    b.Property<string>("InvItemcode")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("INV_ITEMCODE");

                    b.Property<int?>("InvSequence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_SEQUENCE");

                    b.HasIndex(new[] { "InvItemcode", "InvSequence" }, "db_i_itemlNDX");

                    b.ToTable("db_i_iteml", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIItmao", b =>
                {
                    b.Property<int?>("InvGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_GROUP");

                    b.Property<int?>("InvIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_INDEX");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.HasIndex(new[] { "InvItemcodex", "InvIndex", "InvGroup" }, "db_i_itmaoNDX");

                    b.ToTable("db_i_itmao", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIIuom", b =>
                {
                    b.Property<double?>("InvFactor")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_FACTOR");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvUom")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_UOM");

                    b.HasIndex(new[] { "InvItemcodex", "InvUom" }, "db_i_iuomNDX");

                    b.ToTable("db_i_iuom", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbILevel", b =>
                {
                    b.Property<int?>("InvGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_GROUP");

                    b.Property<int?>("InvId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_ID");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.HasIndex(new[] { "InvGroup", "InvId" }, "db_i_levelNDX");

                    b.ToTable("db_i_level", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbILevelg", b =>
                {
                    b.Property<string>("InvDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("INV_DESCRIPTION");

                    b.Property<int?>("InvGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_GROUP");

                    b.HasIndex(new[] { "InvGroup" }, "db_i_levelgNDX");

                    b.ToTable("db_i_levelg", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIMatrix", b =>
                {
                    b.Property<string>("InvBom")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_BOM");

                    b.Property<int?>("InvDrtable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_DRTABLE");

                    b.Property<int?>("InvFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_FLAG");

                    b.Property<string>("InvItemcode")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("INV_ITEMCODE");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<string>("InvKind")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("INV_KIND");

                    b.Property<double?>("InvMax")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_MAX");

                    b.Property<double?>("InvMin")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_MIN");

                    b.Property<int?>("InvStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_STATUS");

                    b.Property<double?>("InvSug")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_SUG");

                    b.Property<string>("InvUom")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_UOM");

                    b.Property<double?>("InvYield")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_YIELD");

                    b.HasIndex(new[] { "InvItemcodex" }, "db_i_matrixNDX");

                    b.ToTable("db_i_matrix", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIName", b =>
                {
                    b.Property<string>("InvName")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("INV_NAME");

                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.HasIndex(new[] { "PosTaskcode", "PosNamecode" }, "db_i_nameNDX");

                    b.ToTable("db_i_name", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbINcond", b =>
                {
                    b.Property<int?>("InvGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_GROUP");

                    b.Property<string>("InvItemcode")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("INV_ITEMCODE");

                    b.Property<double?>("InvMax")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_MAX");

                    b.Property<double?>("InvMin")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_MIN");

                    b.HasIndex(new[] { "InvItemcode", "InvGroup" }, "db_i_ncondNDX");

                    b.ToTable("db_i_ncond", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbINoun", b =>
                {
                    b.Property<int?>("InvFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_FLAG");

                    b.Property<string>("InvItemcode")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("INV_ITEMCODE");

                    b.Property<double?>("InvMax")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_MAX");

                    b.Property<double?>("InvMin")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_MIN");

                    b.HasIndex(new[] { "InvItemcode" }, "db_i_nounNDX");

                    b.ToTable("db_i_noun", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbINozzle", b =>
                {
                    b.Property<string>("InvNozzle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_NOZZLE");

                    b.Property<string>("InvPricecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PRICECODE");

                    b.Property<string>("InvPump")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PUMP");

                    b.Property<string>("InvTank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_TANK");

                    b.HasIndex(new[] { "InvPump", "InvNozzle" }, "db_i_nozzleNDX");

                    b.ToTable("db_i_nozzle", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIPmtrx", b =>
                {
                    b.Property<int?>("InvGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_GROUP");

                    b.Property<int?>("InvId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_ID");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvSequence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_SEQUENCE");

                    b.HasIndex(new[] { "InvItemcodex", "InvSequence" }, "db_i_pmtrxNDX");

                    b.ToTable("db_i_pmtrx", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIPrcsch", b =>
                {
                    b.Property<string>("InvDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("INV_DESCRIPTION");

                    b.Property<string>("InvFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_FLAG");

                    b.Property<int?>("InvPricecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PRICECODE");

                    b.Property<string>("InvScheme")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_SCHEME");

                    b.HasIndex(new[] { "InvPricecode" }, "db_i_prcschNDX");

                    b.ToTable("db_i_prcsch", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIPrice", b =>
                {
                    b.Property<double?>("InvCut")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_CUT");

                    b.Property<string>("InvFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_FLAG");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<double?>("InvPrice")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_PRICE");

                    b.Property<int?>("InvPricecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PRICECODE");

                    b.HasIndex(new[] { "InvItemcodex", "InvPricecode" }, "db_i_priceNDX");

                    b.ToTable("db_i_price", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIPump", b =>
                {
                    b.Property<string>("InvAuthmode")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("INV_AUTHMODE");

                    b.Property<string>("InvDelmode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_DELMODE");

                    b.Property<int?>("InvPump")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PUMP");

                    b.HasIndex(new[] { "InvPump" }, "db_i_pumpNDX");

                    b.ToTable("db_i_pump", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIPumpport", b =>
                {
                    b.Property<int?>("InvId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_ID");

                    b.Property<string>("InvPort")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("INV_PORT");

                    b.Property<int?>("InvProtocol")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PROTOCOL");

                    b.Property<int?>("InvPump")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PUMP");

                    b.HasIndex(new[] { "InvPump" }, "db_i_pumpportNDX");

                    b.ToTable("db_i_pumpport", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIReason", b =>
                {
                    b.Property<string>("InvDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("INV_DESCRIPTION");

                    b.Property<int?>("InvReason")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_REASON");

                    b.HasIndex(new[] { "InvReason" }, "db_i_reasonNDX");

                    b.ToTable("db_i_reason", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbITank", b =>
                {
                    b.Property<double?>("InvCap")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_CAP");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<double?>("InvMax")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_MAX");

                    b.Property<double?>("InvMin")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_MIN");

                    b.Property<double?>("InvSug")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_SUG");

                    b.Property<int?>("InvTank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_TANK");

                    b.Property<int?>("InvWetid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_WETID");

                    b.HasIndex(new[] { "InvTank" }, "db_i_tankNDX");

                    b.ToTable("db_i_tank", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIUom", b =>
                {
                    b.Property<string>("InvCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_CODE");

                    b.Property<string>("InvName")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("INV_NAME");

                    b.HasIndex(new[] { "InvCode" }, "db_i_uomNDX");

                    b.ToTable("db_i_uom", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbIUuom", b =>
                {
                    b.Property<double?>("InvFactor")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_FACTOR");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvUom")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_UOM");

                    b.HasIndex(new[] { "InvItemcodex", "InvUom" }, "db_i_uuomNDX");

                    b.ToTable("db_i_uuom", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbMaster", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("BARCODE");

                    b.Property<string>("Code")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("CODE");

                    b.Property<double?>("Cost")
                        .HasColumnType("REAL")
                        .HasColumnName("COST");

                    b.Property<int?>("Group")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GROUP");

                    b.Property<string>("Name")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("NAME");

                    b.Property<double?>("Price")
                        .HasColumnType("REAL")
                        .HasColumnName("PRICE");

                    b.Property<double?>("Qty")
                        .HasColumnType("REAL")
                        .HasColumnName("QTY");

                    b.HasIndex(new[] { "Code" }, "db_masterNDX");

                    b.ToTable("db_master", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPApiprm", b =>
                {
                    b.Property<string>("PosAccount")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_ACCOUNT");

                    b.Property<string>("PosApiid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_APIID");

                    b.Property<string>("PosByte1")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("POS_BYTE1");

                    b.Property<string>("PosByte2")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("POS_BYTE2");

                    b.Property<string>("PosDword1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_DWORD1");

                    b.Property<string>("PosDword2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_DWORD2");

                    b.Property<string>("PosFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FLAG");

                    b.Property<double?>("PosMoney1")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_MONEY1");

                    b.Property<double?>("PosMoney2")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_MONEY2");

                    b.Property<double?>("PosReal1")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_REAL1");

                    b.Property<double?>("PosReal2")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_REAL2");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.Property<string>("PosWord1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_WORD1");

                    b.Property<string>("PosWord2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_WORD2");

                    b.HasIndex(new[] { "PosTaskcode" }, "db_p_apiprmNDX");

                    b.ToTable("db_p_apiprm", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPApiprm2", b =>
                {
                    b.Property<string>("PosAccount")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_ACCOUNT");

                    b.Property<int?>("PosApiid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_APIID");

                    b.Property<string>("PosByte1")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("POS_BYTE1");

                    b.Property<string>("PosByte2")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("POS_BYTE2");

                    b.Property<string>("PosDword1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_DWORD1");

                    b.Property<string>("PosDword2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_DWORD2");

                    b.Property<string>("PosFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FLAG");

                    b.Property<double?>("PosMoney1")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_MONEY1");

                    b.Property<double?>("PosMoney2")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_MONEY2");

                    b.Property<double?>("PosReal1")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_REAL1");

                    b.Property<double?>("PosReal2")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_REAL2");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.Property<string>("PosWord1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_WORD1");

                    b.Property<string>("PosWord2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_WORD2");

                    b.HasIndex(new[] { "PosTaskcode" }, "db_p_apiprm2NDX");

                    b.ToTable("db_p_apiprm2", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPButton", b =>
                {
                    b.Property<string>("PosBitmap")
                        .HasColumnType("CHAR(12)")
                        .HasColumnName("POS_BITMAP");

                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<int?>("PosColor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_COLOR");

                    b.Property<int?>("PosFcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FCODE");

                    b.Property<int?>("PosFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FLAG");

                    b.Property<int?>("PosFntcolor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FNTCOLOR");

                    b.Property<string>("PosFntname")
                        .HasColumnType("CHAR(31)")
                        .HasColumnName("POS_FNTNAME");

                    b.Property<int?>("PosFntsize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FNTSIZE");

                    b.Property<int?>("PosFntstyle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FNTSTYLE");

                    b.Property<int?>("PosHeight")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_HEIGHT");

                    b.Property<int?>("PosLeft")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_LEFT");

                    b.Property<int?>("PosSecurity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SECURITY");

                    b.Property<int?>("PosSfcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SFCODE");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.Property<string>("PosText")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_TEXT");

                    b.Property<int?>("PosTop")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_TOP");

                    b.Property<int?>("PosWidth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_WIDTH");

                    b.HasIndex(new[] { "PosCode", "PosLeft", "PosTop" }, "db_p_buttonNDX");

                    b.ToTable("db_p_button", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPCurr", b =>
                {
                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<double?>("PosRate")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_RATE");

                    b.Property<string>("PosSym")
                        .HasColumnType("CHAR(3)")
                        .HasColumnName("POS_SYM");

                    b.HasIndex(new[] { "PosCode" }, "db_p_currNDX");

                    b.ToTable("db_p_curr", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPError", b =>
                {
                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<string>("PosMessage")
                        .HasColumnType("CHAR(250)")
                        .HasColumnName("POS_MESSAGE");

                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosShortmsg")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SHORTMSG");

                    b.HasIndex(new[] { "PosCode", "PosNamecode" }, "db_p_errorNDX");

                    b.ToTable("db_p_error", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPForm", b =>
                {
                    b.Property<string>("PosBitmap")
                        .HasColumnType("CHAR(12)")
                        .HasColumnName("POS_BITMAP");

                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<int?>("PosColor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_COLOR");

                    b.Property<int?>("PosHeight")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_HEIGHT");

                    b.Property<int?>("PosLeft")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_LEFT");

                    b.Property<string>("PosName")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_NAME");

                    b.Property<int?>("PosTop")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_TOP");

                    b.Property<int?>("PosType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_TYPE");

                    b.Property<int?>("PosWidth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_WIDTH");

                    b.HasIndex(new[] { "PosCode" }, "db_p_formNDX");

                    b.ToTable("db_p_form", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPGuide", b =>
                {
                    b.Property<string>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<string>("PosMessage")
                        .HasColumnType("CHAR(250)")
                        .HasColumnName("POS_MESSAGE");

                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosShortmsg")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SHORTMSG");

                    b.HasIndex(new[] { "PosCode", "PosNamecode" }, "db_p_guideNDX");

                    b.ToTable("db_p_guide", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPHq", b =>
                {
                    b.Property<string>("PosHqaddr")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_HQADDR");

                    b.Property<string>("PosHqcode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_HQCODE");

                    b.Property<string>("PosHqname")
                        .HasColumnType("CHAR(60)")
                        .HasColumnName("POS_HQNAME");

                    b.Property<string>("PosPhone")
                        .HasColumnType("CHAR(15)")
                        .HasColumnName("POS_PHONE");

                    b.Property<string>("PosTin")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_TIN");

                    b.HasIndex(new[] { "PosHqcode" }, "db_p_hqNDX");

                    b.ToTable("db_p_hq", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPHrlyd", b =>
                {
                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<string>("PosDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_DESCRIPTION");

                    b.Property<string>("PosFrom")
                        .HasColumnType("CHAR(4)")
                        .HasColumnName("POS_FROM");

                    b.Property<int?>("PosSequence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SEQUENCE");

                    b.Property<string>("PosTo")
                        .HasColumnType("CHAR(4)")
                        .HasColumnName("POS_TO");

                    b.HasIndex(new[] { "PosCode", "PosSequence" }, "db_p_hrlydNDX");

                    b.ToTable("db_p_hrlyd", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPHrlyg", b =>
                {
                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<string>("PosDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_DESCRIPTION");

                    b.HasIndex(new[] { "PosCode" }, "db_p_hrlygNDX");

                    b.ToTable("db_p_hrlyg", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPItemp", b =>
                {
                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("PosGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_GROUP");

                    b.Property<int?>("PosIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_INDEX");

                    b.HasIndex(new[] { "InvItemcodex", "PosIndex", "PosGroup" }, "db_p_itempNDX");

                    b.ToTable("db_p_itemp", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPKboard", b =>
                {
                    b.Property<int?>("PosFcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FCODE");

                    b.Property<int?>("PosFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FLAG");

                    b.Property<int?>("PosKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_KEY");

                    b.Property<int?>("PosSecurity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SECURITY");

                    b.Property<int?>("PosSfcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SFCODE");

                    b.Property<int?>("PosShift")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SHIFT");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.HasIndex(new[] { "PosKey", "PosShift" }, "db_p_kboardNDX");

                    b.ToTable("db_p_kboard", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPModi", b =>
                {
                    b.Property<int?>("PosFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FLAG");

                    b.Property<int?>("PosGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_GROUP");

                    b.Property<int?>("PosSubgroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SUBGROUP");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.HasIndex(new[] { "PosTaskcode" }, "db_p_modiNDX");

                    b.ToTable("db_p_modi", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPMsg", b =>
                {
                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<string>("PosMessage")
                        .HasColumnType("CHAR(250)")
                        .HasColumnName("POS_MESSAGE");

                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosShortmsg")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SHORTMSG");

                    b.HasIndex(new[] { "PosCode", "PosNamecode" }, "db_p_msgNDX");

                    b.ToTable("db_p_msg", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPMsg1", b =>
                {
                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<string>("PosMessage")
                        .HasColumnType("CHAR(250)")
                        .HasColumnName("POS_MESSAGE");

                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosShortmsg")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SHORTMSG");

                    b.HasIndex(new[] { "PosCode", "PosNamecode" }, "db_p_msg1NDX");

                    b.ToTable("db_p_msg1", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPMsg123", b =>
                {
                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_CODE");

                    b.Property<string>("PosMessage")
                        .HasColumnType("CHAR(250)")
                        .HasColumnName("POS_MESSAGE");

                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosShortmsg")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SHORTMSG");

                    b.HasIndex(new[] { "PosCode", "PosNamecode" }, "db_p_msg123NDX");

                    b.ToTable("db_p_msg123", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPName", b =>
                {
                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.Property<string>("PosTaskname")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_TASKNAME");

                    b.HasIndex(new[] { "PosTaskcode", "PosNamecode" }, "db_p_nameNDX");

                    b.ToTable("db_p_name", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPNmcode", b =>
                {
                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosNmschm")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_NMSCHM");

                    b.HasIndex(new[] { "PosNamecode" }, "db_p_nmcodeNDX");

                    b.ToTable("db_p_nmcode", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPPmap", b =>
                {
                    b.Property<string>("PosHqcode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_HQCODE");

                    b.Property<int?>("PosIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_INDEX");

                    b.Property<int?>("PosPstid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_PSTID");

                    b.Property<string>("PosSitecode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_SITECODE");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.HasIndex(new[] { "PosHqcode", "PosSitecode", "PosPstid", "PosIndex" }, "db_p_pmapNDX");

                    b.ToTable("db_p_pmap", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPPromo", b =>
                {
                    b.Property<int?>("DptCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_CODE");

                    b.Property<int?>("DptGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DPT_GROUP");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<string>("PosAccount")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_ACCOUNT");

                    b.Property<double?>("PosAmt")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_AMT");

                    b.Property<double?>("PosQty")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_QTY");

                    b.Property<double?>("PosRate")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_RATE");

                    b.Property<string>("PosType")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("POS_TYPE");

                    b.HasIndex(new[] { "PosAccount", "PosType", "InvItemcodex" }, "db_p_promoNDX");

                    b.ToTable("db_p_promo", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPPromod", b =>
                {
                    b.Property<int?>("PosGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_GROUP");

                    b.Property<int?>("PosIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_INDEX");

                    b.Property<int?>("PosSequence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SEQUENCE");

                    b.HasIndex(new[] { "PosGroup", "PosSequence", "PosIndex" }, "db_p_promodNDX");

                    b.ToTable("db_p_promod", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPPromog", b =>
                {
                    b.Property<string>("PosDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_DESCRIPTION");

                    b.Property<int?>("PosGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_GROUP");

                    b.HasIndex(new[] { "PosGroup" }, "db_p_promogNDX");

                    b.ToTable("db_p_promog", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPPst", b =>
                {
                    b.Property<int?>("InvPricecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PRICECODE");

                    b.Property<string>("PosDeftask")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_DEFTASK");

                    b.Property<int?>("PosForm")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_FORM");

                    b.Property<string>("PosHqcode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_HQCODE");

                    b.Property<string>("PosKind")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_KIND");

                    b.Property<int?>("PosPstid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_PSTID");

                    b.Property<string>("PosPstname")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_PSTNAME");

                    b.Property<string>("PosSerial")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SERIAL");

                    b.Property<string>("PosSitecode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_SITECODE");

                    b.Property<string>("PosTask0006")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASK0006");

                    b.HasIndex(new[] { "PosHqcode", "PosSitecode", "PosPstid" }, "db_P_PSTNDX");

                    b.ToTable("db_P_PST", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPSdef", b =>
                {
                    b.Property<int?>("PosGroup")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_GROUP");

                    b.Property<string>("PosHqcode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_HQCODE");

                    b.Property<int?>("PosIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_INDEX");

                    b.HasIndex(new[] { "PosHqcode", "PosIndex", "PosGroup" }, "db_p_sdefNDX");

                    b.ToTable("db_p_sdef", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPSite", b =>
                {
                    b.Property<string>("PosBhf")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("POS_BHF");

                    b.Property<string>("PosBht")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("POS_BHT");

                    b.Property<string>("PosHqcode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_HQCODE");

                    b.Property<string>("PosPhone")
                        .HasColumnType("CHAR(15)")
                        .HasColumnName("POS_PHONE");

                    b.Property<string>("PosSiteaddr")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SITEADDR");

                    b.Property<string>("PosSitecode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_SITECODE");

                    b.Property<string>("PosSitename")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SITENAME");

                    b.Property<string>("PosSitetin")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("POS_SITETIN");

                    b.HasIndex(new[] { "PosHqcode", "PosSitecode" }, "db_p_siteNDX");

                    b.ToTable("db_p_site", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPSiteq", b =>
                {
                    b.Property<double?>("PosFri")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_FRI");

                    b.Property<string>("PosHqcode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_HQCODE");

                    b.Property<double?>("PosMon")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_MON");

                    b.Property<double?>("PosSat")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_SAT");

                    b.Property<string>("PosSitecode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_SITECODE");

                    b.Property<double?>("PosSun")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_SUN");

                    b.Property<double?>("PosThu")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_THU");

                    b.Property<double?>("PosTue")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_TUE");

                    b.Property<double?>("PosWed")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_WED");

                    b.HasIndex(new[] { "PosHqcode", "PosSitecode" }, "db_p_siteqNDX");

                    b.ToTable("db_p_siteq", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPSmap", b =>
                {
                    b.Property<string>("PosHqcode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_HQCODE");

                    b.Property<int?>("PosIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_INDEX");

                    b.Property<string>("PosSitecode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_SITECODE");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.HasIndex(new[] { "PosHqcode", "PosSitecode", "PosIndex" }, "db_p_smapNDX");

                    b.ToTable("db_p_smap", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPTask", b =>
                {
                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.Property<string>("PosTasktype")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("POS_TASKTYPE");

                    b.HasIndex(new[] { "PosTaskcode" }, "db_p_taskNDX");

                    b.ToTable("db_p_task", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPText", b =>
                {
                    b.Property<int?>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosText")
                        .HasColumnType("CHAR(255)")
                        .HasColumnName("POS_TEXT");

                    b.Property<int?>("PosTextcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_TEXTCODE");

                    b.HasIndex(new[] { "PosTextcode", "PosNamecode" }, "db_p_textNDX");

                    b.ToTable("db_p_text", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPTextTest", b =>
                {
                    b.Property<string>("PosNamecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_NAMECODE");

                    b.Property<string>("PosText")
                        .HasColumnType("CHAR(255)")
                        .HasColumnName("POS_TEXT");

                    b.Property<string>("PosTextcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_TEXTCODE");

                    b.ToTable("db_p_text_test", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPTlink", b =>
                {
                    b.Property<string>("PosSequence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SEQUENCE");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKCODE");

                    b.Property<string>("PosTasklink")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("POS_TASKLINK");

                    b.HasIndex(new[] { "PosTaskcode", "PosSequence" }, "db_p_tlinkNDX");

                    b.ToTable("db_p_tlink", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPUser", b =>
                {
                    b.Property<string>("PosEmpid")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_EMPID");

                    b.Property<string>("PosPassword")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_PASSWORD");

                    b.Property<int?>("PosSecurity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_SECURITY");

                    b.Property<string>("PosUsername")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_USERNAME");

                    b.Property<int?>("PosUsertype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("POS_USERTYPE");

                    b.HasIndex(new[] { "PosEmpid" }, "db_p_userNDX");

                    b.ToTable("db_p_user", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbPUserq", b =>
                {
                    b.Property<double?>("PosCa")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_CA");

                    b.Property<double?>("PosCb")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_CB");

                    b.Property<double?>("PosCc")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_CC");

                    b.Property<string>("PosEmpid")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("POS_EMPID");

                    b.Property<double?>("PosFri")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_FRI");

                    b.Property<double?>("PosMon")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_MON");

                    b.Property<double?>("PosQ1")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_Q1");

                    b.Property<double?>("PosQ2")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_Q2");

                    b.Property<double?>("PosQ3")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_Q3");

                    b.Property<double?>("PosSat")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_SAT");

                    b.Property<double?>("PosSun")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_SUN");

                    b.Property<double?>("PosThu")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_THU");

                    b.Property<double?>("PosTue")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_TUE");

                    b.Property<double?>("PosWed")
                        .HasColumnType("REAL")
                        .HasColumnName("POS_WED");

                    b.HasIndex(new[] { "PosEmpid" }, "db_p_userqNDX");

                    b.ToTable("db_p_userq", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbSBase", b =>
                {
                    b.Property<int?>("CalCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_CODE");

                    b.Property<string>("CalEdate")
                        .HasColumnType("CHAR(8)")
                        .HasColumnName("CAL_EDATE");

                    b.Property<int?>("CalFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_FLAG");

                    b.Property<string>("CalName")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("CAL_NAME");

                    b.Property<string>("CalSdate")
                        .HasColumnType("CHAR(8)")
                        .HasColumnName("CAL_SDATE");

                    b.HasIndex(new[] { "CalCode" }, "db_s_baseNDX");

                    b.ToTable("db_s_base", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbSCustom", b =>
                {
                    b.Property<int?>("CalCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_CODE");

                    b.Property<int?>("CalFlag1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_FLAG1");

                    b.Property<int?>("CalFlag2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_FLAG2");

                    b.HasIndex(new[] { "CalCode" }, "db_s_customNDX");

                    b.ToTable("db_s_custom", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbSDlist", b =>
                {
                    b.Property<int?>("CalCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_CODE");

                    b.Property<string>("CalDate")
                        .HasColumnType("CHAR(8)")
                        .HasColumnName("CAL_DATE");

                    b.HasIndex(new[] { "CalCode", "CalDate" }, "db_s_dlistNDX");

                    b.ToTable("db_s_dlist", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbSList", b =>
                {
                    b.Property<int?>("CalCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_CODE");

                    b.Property<int?>("CalCodelist")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_CODELIST");

                    b.HasIndex(new[] { "CalCode", "CalCodelist" }, "db_s_listNDX");

                    b.ToTable("db_s_list", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbSPeriod", b =>
                {
                    b.Property<int?>("CalCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_CODE");

                    b.Property<int?>("CalInterval")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_INTERVAL");

                    b.Property<int?>("CalScope")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_SCOPE");

                    b.HasIndex(new[] { "CalCode" }, "db_s_periodNDX");

                    b.ToTable("db_s_period", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbSTime", b =>
                {
                    b.Property<int?>("CalCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAL_CODE");

                    b.Property<string>("CalEtime")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("CAL_ETIME");

                    b.Property<string>("CalStime")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("CAL_STIME");

                    b.HasIndex(new[] { "CalCode", "CalStime" }, "db_s_timeNDX");

                    b.ToTable("db_s_time", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XAddon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("XAccountcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xACCOUNTCODE");

                    b.Property<double?>("XAmountdue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNTDUE");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<string>("XRate")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xRATE");

                    b.Property<string>("XStamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMP");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XTid" }, "xAddonIDX");

                    b.ToTable("xAddon", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<string>("XMcAccount")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_ACCOUNT");

                    b.Property<string>("XMcAmtbal")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_AMTBAL");

                    b.Property<string>("XMcCardname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_CARDNAME");

                    b.Property<string>("XMcCardno")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_CARDNO");

                    b.Property<string>("XMcCorpcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_CORPCODE");

                    b.Property<string>("XMcDatetime")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_DATETIME");

                    b.Property<string>("XMcDaylimit")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_DAYLIMIT");

                    b.Property<string>("XMcExpire")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_EXPIRE");

                    b.Property<string>("XMcFlag")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_FLAG");

                    b.Property<string>("XMcLimit")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_LIMIT");

                    b.Property<string>("XMcPdatetime")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_PDATETIME");

                    b.Property<string>("XMcPsitecode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_PSITECODE");

                    b.Property<string>("XMcPump")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_PUMP");

                    b.Property<string>("XMcPvalue")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_PVALUE");

                    b.Property<string>("XMcPxtype")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_PXTYPE");

                    b.Property<string>("XMcReqvalue")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_REQVALUE");

                    b.Property<string>("XMcSeries")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_SERIES");

                    b.Property<string>("XMcSitecode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_SITECODE");

                    b.Property<string>("XMcValue")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_VALUE");

                    b.Property<string>("XMcVersion")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_VERSION");

                    b.Property<string>("XMcVolbal")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_VOLBAL");

                    b.Property<string>("XMcXtype")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMC_XTYPE");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XTid" }, "xCardIDX");

                    b.ToTable("xCard", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("XAccountcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xACCOUNTCODE");

                    b.Property<double?>("XAmount1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNT1");

                    b.Property<double?>("XAmount2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNT2");

                    b.Property<double?>("XAmountdue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNTDUE");

                    b.Property<double?>("XAmt1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmt1");

                    b.Property<double?>("XAmt2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmt2");

                    b.Property<double?>("XAmt3")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmt3");

                    b.Property<string>("XApiflag")
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("xAPIFLAG");

                    b.Property<string>("XByte1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xBYTE1");

                    b.Property<string>("XByte2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xBYTE2");

                    b.Property<double?>("XChangedue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCHANGEDUE");

                    b.Property<string>("XCkBankname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCK_BANKNAME");

                    b.Property<string>("XCkCheckno")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCK_CHECKNO");

                    b.Property<int?>("XControlno")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xCONTROLNO");

                    b.Property<int?>("XControlr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xCONTROLR");

                    b.Property<string>("XCurrsym")
                        .HasColumnType("CHAR(12)")
                        .HasColumnName("xCURRSYM");

                    b.Property<string>("XCustomfield1")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("xCUSTOMFIELD1");

                    b.Property<string>("XDescription")
                        .HasColumnType("CHAR(32)")
                        .HasColumnName("xDESCRIPTION");

                    b.Property<double?>("XDword1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xDWORD1");

                    b.Property<double?>("XDword2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xDWORD2");

                    b.Property<int?>("XFindex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xFINDEX");

                    b.Property<string>("XFlag")
                        .HasColumnType("CHAR(13)")
                        .HasColumnName("xFLAG");

                    b.Property<double?>("XForex")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xFOREX");

                    b.Property<string>("XFormat")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("xFORMAT");

                    b.Property<string>("XFtype")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("xFType");

                    b.Property<string>("XGcSerialno")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xGC_SERIALNO");

                    b.Property<int?>("XGuestcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xGUESTCOUNT");

                    b.Property<string>("XItemcodex")
                        .HasColumnType("char(17)")
                        .HasColumnName("xITEMCODEX");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<double?>("XMaxamt")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xMAXAMT");

                    b.Property<double?>("XMaxqty")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xMAXQTY");

                    b.Property<double?>("XQty1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xQty1");

                    b.Property<double?>("XQty2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xQty2");

                    b.Property<double?>("XReal1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xREAL1");

                    b.Property<double?>("XReal2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xREAL2");

                    b.Property<double?>("XRoundamt")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xROUNDAMT");

                    b.Property<int?>("XSrcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSRCOUNT");

                    b.Property<string>("XStamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMP");

                    b.Property<string>("XTaskcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKCODE");

                    b.Property<string>("XTasktype")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKTYPE");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.Property<double?>("XTotalamount")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xTOTALAMOUNT");

                    b.Property<double?>("XTotalamountdue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xTOTALAMOUNTDUE");

                    b.Property<double?>("XTransactiondue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xTRANSACTIONDUE");

                    b.Property<string>("XTstamp")
                        .HasColumnType("char(20)")
                        .HasColumnName("xTSTAMP");

                    b.Property<double?>("XUsedamt")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xUSEDAMT");

                    b.Property<double?>("XUsedqty")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xUSEDQTY");

                    b.Property<double?>("XWord1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xWORD1");

                    b.Property<double?>("XWord2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xWORD2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XTid" }, "xFunctionIDX");

                    b.ToTable("xFunctions", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<double?>("XAddon")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xADDON");

                    b.Property<double?>("XAmount")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNT");

                    b.Property<double?>("XAmountDb")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmountDB");

                    b.Property<double?>("XAmountPaid")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmountPaid");

                    b.Property<double?>("XAmt1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmt1");

                    b.Property<string>("XApiflag")
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("xAPIFLAG");

                    b.Property<string>("XBarcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xBARCODE");

                    b.Property<double?>("XBaseprice")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xBASEPRICE");

                    b.Property<string>("XCid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCID");

                    b.Property<double?>("XClosetotal")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCLOSETOTAL");

                    b.Property<string>("XCname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCNAME");

                    b.Property<string>("XControlflag")
                        .HasColumnType("CHAR(11)")
                        .HasColumnName("xCONTROLFLAG");

                    b.Property<double?>("XCoupon")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCOUPON");

                    b.Property<double?>("XCut")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCUT");

                    b.Property<string>("XDescription")
                        .HasColumnType("CHAR(32)")
                        .HasColumnName("xDESCRIPTION");

                    b.Property<double?>("XDiscount")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xDISCOUNT");

                    b.Property<int?>("XDrtable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xDRTABLE");

                    b.Property<string>("XFormat")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("xFORMAT");

                    b.Property<int?>("XGuestcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xGUESTCOUNT");

                    b.Property<string>("XInvcode")
                        .HasColumnType("CHAR(15)")
                        .HasColumnName("xINVCODE");

                    b.Property<string>("XItemcode")
                        .HasColumnType("CHAR(16)")
                        .HasColumnName("xITEMCODE");

                    b.Property<string>("XItemcodex")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("xITEMCODEX");

                    b.Property<int?>("XItemflag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xITEMFLAG");

                    b.Property<int?>("XItemflagx")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xITEMFLAGX");

                    b.Property<string>("XItemkind")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xITEMKIND");

                    b.Property<string>("XItemtype")
                        .HasColumnType("CHAR(19)")
                        .HasColumnName("xITEMTYPE");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<double?>("XMaxcond")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xMAXCOND");

                    b.Property<double?>("XMincond")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xMINCOND");

                    b.Property<string>("XModgroup")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMODGROUP");

                    b.Property<string>("XNounflag")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xNOUNFLAG");

                    b.Property<int?>("XNozzle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xNOZZLE");

                    b.Property<string>("XNzstamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xNZSTAMP");

                    b.Property<double?>("XOpentotal")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xOPENTOTAL");

                    b.Property<double?>("XPoints")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xPOINTS");

                    b.Property<double?>("XPrice")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xPRICE");

                    b.Property<string>("XPricecode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xPRICECODE");

                    b.Property<double?>("XPricedb")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xPRICEDB");

                    b.Property<string>("XPriceflag")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xPRICEFLAG");

                    b.Property<int?>("XPromoindex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPROMOINDEX");

                    b.Property<int?>("XPstid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPSTID");

                    b.Property<int?>("XPump")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPUMP");

                    b.Property<int?>("XPumpflag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPUMPFLAG");

                    b.Property<double?>("XQuantity")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xQUANTITY");

                    b.Property<int?>("XRoutecolumn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xROUTECOLUMN");

                    b.Property<string>("XSeatid")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xSEATID");

                    b.Property<string>("XSerialnumber")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSERIALNUMBER");

                    b.Property<string>("XSid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSID");

                    b.Property<string>("XSname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSNAME");

                    b.Property<string>("XStamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMP");

                    b.Property<string>("XStampdown")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMPDOWN");

                    b.Property<string>("XStampup")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMPUP");

                    b.Property<int?>("XStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSTATUS");

                    b.Property<string>("XTable")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTABLE");

                    b.Property<int?>("XTank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTANK");

                    b.Property<string>("XTaskcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKCODE");

                    b.Property<string>("XTasktype")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKTYPE");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.Property<double?>("XTotalVariance")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xTotalVariance");

                    b.Property<int?>("XTotaltype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTOTALTYPE");

                    b.Property<string>("XTotaltypename")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTOTALTYPENAME");

                    b.Property<int?>("XUom")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xUOM");

                    b.Property<string>("XVehicleplateno")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xVEHICLEPLATENO");

                    b.Property<string>("XVehicletype")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xVEHICLETYPE");

                    b.Property<string>("XVipCode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CODE");

                    b.Property<string>("XVipF01")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F01");

                    b.Property<string>("XVipF02")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F02");

                    b.Property<string>("XVipF03")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F03");

                    b.Property<string>("XVipF04")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F04");

                    b.Property<string>("XVipF05")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F05");

                    b.Property<string>("XVipFname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_FNAME");

                    b.Property<string>("XVipLname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_LNAME");

                    b.Property<string>("XVipMname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_MNAME");

                    b.Property<double?>("XYield")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xYIELD");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XApiflag" }, "iItemsA");

                    b.HasIndex(new[] { "XClosetotal" }, "iItemsC");

                    b.HasIndex(new[] { "XTid" }, "iItemsID");

                    b.HasIndex(new[] { "XItemcode" }, "iItemsIT");

                    b.HasIndex(new[] { "XOpentotal" }, "iItemsO");

                    b.HasIndex(new[] { "XPump" }, "iItemsP");

                    b.HasIndex(new[] { "XStamp" }, "iItemsS");

                    b.HasIndex(new[] { "XTank" }, "iItemsT");

                    b.HasIndex(new[] { "XTid" }, "xItemIDX");

                    b.ToTable("xItems", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XModi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("XApiflag")
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("xAPIFLAG");

                    b.Property<string>("XDescription")
                        .HasColumnType("CHAR(32)")
                        .HasColumnName("xDESCRIPTION");

                    b.Property<int?>("XFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xFLAG");

                    b.Property<string>("XFormat")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("xFORMAT");

                    b.Property<int?>("XItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xItemId");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<string>("XModgroup")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMODGROUP");

                    b.Property<string>("XModsgroup")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMODSGROUP");

                    b.Property<string>("XOwneritemcodx")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("xOWNERITEMCODX");

                    b.Property<double?>("XOwnerqty")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xOWNERQTY");

                    b.Property<string>("XOwnerstamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xOWNERSTAMP");

                    b.Property<double?>("XQuantity")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xQUANTITY");

                    b.Property<string>("XStamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMP");

                    b.Property<string>("XTaskcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKCODE");

                    b.Property<string>("XTasktype")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKTYPE");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XTid" }, "iModiID");

                    b.ToTable("xMODI", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XOffline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("XAfterInvoice")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xAfterInvoice");

                    b.Property<DateTime?>("XAfterStamp")
                        .HasColumnType("TIMESTAMP\n    xLastUpdate TIMESTAMP")
                        .HasColumnName("xAfterStamp");

                    b.Property<double?>("XAmount")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmount");

                    b.Property<int?>("XBatch")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xBatch");

                    b.Property<DateOnly?>("XBdate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("xBDate");

                    b.Property<int?>("XBeforeInvoice")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xBeforeInvoice");

                    b.Property<DateTime?>("XBeforeStamp")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xBeforeStamp");

                    b.Property<string>("XCashier")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCashier");

                    b.Property<string>("XCashierCode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xCashierCode");

                    b.Property<double?>("XCloseTotalizer")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCloseTotalizer");

                    b.Property<string>("XItemCode")
                        .HasColumnType("CHAR(16)")
                        .HasColumnName("xItemCode");

                    b.Property<string>("XItemName")
                        .HasColumnType("CHAR(32)")
                        .HasColumnName("xItemName");

                    b.Property<int?>("XNozzle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xNozzle");

                    b.Property<double?>("XOpenTotalizer")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xOpenTotalizer");

                    b.Property<double?>("XOrigOpenTotal")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xOrigOpenTotal");

                    b.Property<int?>("XPumpNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPumpNo");

                    b.Property<double?>("XQuantity")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xQuantity");

                    b.Property<int?>("XTankNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTankNo");

                    b.Property<int?>("XTotalType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTotalType");

                    b.Property<double?>("XUnitPrice")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xUnitPrice");

                    b.HasKey("Id");

                    b.ToTable("xOffline", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("XBatch")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xBATCH");

                    b.Property<int?>("XCorpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xCORPCODE");

                    b.Property<int?>("XDay")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xDAY");

                    b.Property<int?>("XDiscountmethod")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xDISCOUNTMETHOD");

                    b.Property<string>("XFlag")
                        .HasColumnType("CHAR(13)")
                        .HasColumnName("xFLAG");

                    b.Property<string>("XFld001")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("xFLD001");

                    b.Property<int?>("XGuestcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xGUESTCOUNT");

                    b.Property<int?>("XHqcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xHQCODE");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<int?>("XMonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xMONTH");

                    b.Property<string>("XOdometer")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xODOMETER");

                    b.Property<string>("XOid")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xOID");

                    b.Property<string>("XOname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xONAME");

                    b.Property<string>("XPricecode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xPRICECODE");

                    b.Property<int?>("XPromoindex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPROMOINDEX");

                    b.Property<string>("XPropertytag")
                        .HasColumnType("CHAR(60)")
                        .HasColumnName("xPROPERTYTAG");

                    b.Property<int?>("XPstid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPSTID");

                    b.Property<int?>("XRoutecolumn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xROUTECOLUMN");

                    b.Property<int?>("XRsn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xRSN");

                    b.Property<int?>("XRtn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xRTN");

                    b.Property<int?>("XSequence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSEQUENCE");

                    b.Property<int?>("XShift")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSHIFT");

                    b.Property<int?>("XSitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSITECODE");

                    b.Property<string>("XSrcount")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSRCOUNT");

                    b.Property<string>("XStamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMP");

                    b.Property<string>("XStampfi")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMPFI");

                    b.Property<string>("XStamplt")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMPLT");

                    b.Property<string>("XTable")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTABLE");

                    b.Property<string>("XTent")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTENT");

                    b.Property<string>("XTicketId")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTicketID");

                    b.Property<int?>("XTotaltype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTOTALTYPE");

                    b.Property<string>("XTotaltypename")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTOTALTYPENAME");

                    b.Property<int?>("XTransaction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTRANSACTION");

                    b.Property<double?>("XVoidtransaction")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xVOIDTRANSACTION");

                    b.Property<int?>("XYear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xYEAR");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XCorpcode" }, "iTicketsC");

                    b.HasIndex(new[] { "XDay" }, "iTicketsD");

                    b.HasIndex(new[] { "XTicketId" }, "iTicketsID");

                    b.HasIndex(new[] { "XMonth" }, "iTicketsM");

                    b.HasIndex(new[] { "XSitecode" }, "iTicketsS");

                    b.HasIndex(new[] { "XYear" }, "iTicketsY");

                    b.ToTable("xTickets", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XVip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.Property<string>("XVipApc")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_APC");

                    b.Property<string>("XVipBario")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_BARIO");

                    b.Property<string>("XVipCardlabel")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CARDLABEL");

                    b.Property<string>("XVipCardname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CARDNAME");

                    b.Property<string>("XVipCity")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CITY");

                    b.Property<string>("XVipCode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CODE");

                    b.Property<string>("XVipCode2")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CODE2");

                    b.Property<string>("XVipFname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_FNAME");

                    b.Property<string>("XVipHseno")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_HSENO");

                    b.Property<string>("XVipLname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_LNAME");

                    b.Property<string>("XVipMid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_MID");

                    b.Property<string>("XVipMname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_MNAME");

                    b.Property<string>("XVipPcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PCODE");

                    b.Property<string>("XVipPtsa")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PTSA");

                    b.Property<string>("XVipPtse")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PTSE");

                    b.Property<string>("XVipPtsp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PTSP");

                    b.Property<string>("XVipPtsr")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PTSR");

                    b.Property<string>("XVipRef")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_REF");

                    b.Property<string>("XVipSalute")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_SALUTE");

                    b.Property<string>("XVipStreet")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_STREET");

                    b.Property<string>("XVipTid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_TID");

                    b.Property<string>("XVipTin")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_TIN");

                    b.Property<string>("XVipZip")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_ZIP");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XTid" }, "xVIPIDX");

                    b.ToTable("xVIP", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlBButton", b =>
                {
                    b.Property<string>("EpoBitmap")
                        .HasColumnType("CHAR(12)")
                        .HasColumnName("EPO_BITMAP");

                    b.Property<string>("EpoCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_CODE");

                    b.Property<string>("EpoColor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_COLOR");

                    b.Property<string>("EpoFcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_FCODE");

                    b.Property<string>("EpoFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_FLAG");

                    b.Property<string>("EpoFntcolor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_FNTCOLOR");

                    b.Property<string>("EpoFntname")
                        .HasColumnType("CHAR(31)")
                        .HasColumnName("EPO_FNTNAME");

                    b.Property<string>("EpoFntsize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_FNTSIZE");

                    b.Property<string>("EpoHeight")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_HEIGHT");

                    b.Property<string>("EpoLeft")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_LEFT");

                    b.Property<string>("EpoSecurity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_SECURITY");

                    b.Property<string>("EpoTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("EPO_TASKCODE");

                    b.Property<string>("EpoText")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("EPO_TEXT");

                    b.Property<string>("EpoTop")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_TOP");

                    b.Property<string>("EpoWidth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_WIDTH");

                    b.HasIndex(new[] { "EpoCode", "EpoLeft", "EpoTop" }, "xml_B_BUTTONNDX");

                    b.ToTable("xml_B_BUTTON", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlBForm", b =>
                {
                    b.Property<string>("EpoBitmap")
                        .HasColumnType("CHAR(12)")
                        .HasColumnName("EPO_BITMAP");

                    b.Property<int?>("EpoCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_CODE");

                    b.Property<int?>("EpoColor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_COLOR");

                    b.Property<string>("EpoName")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("EPO_NAME");

                    b.HasIndex(new[] { "EpoCode" }, "xml_B_FORMNDX");

                    b.ToTable("xml_B_FORM", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlBTask", b =>
                {
                    b.Property<string>("EpoCommand")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("EPO_COMMAND");

                    b.Property<string>("EpoTaskcode")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("EPO_TASKCODE");

                    b.Property<int?>("EpoTasktype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_TASKTYPE");

                    b.HasIndex(new[] { "EpoTaskcode" }, "xml_B_TASKNDX");

                    b.ToTable("xml_B_TASK", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlEmp", b =>
                {
                    b.Property<string>("EpoBirthdate")
                        .HasColumnType("CHAR(8)")
                        .HasColumnName("EPO_BIRTHDATE");

                    b.Property<string>("EpoCode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("EPO_CODE");

                    b.Property<string>("EpoFlag")
                        .HasColumnType("TEXT")
                        .HasColumnName("EPO_FLAG");

                    b.Property<string>("EpoFname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("EPO_FNAME");

                    b.Property<int?>("EpoGender")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_GENDER");

                    b.Property<string>("EpoLname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("EPO_LNAME");

                    b.Property<string>("EpoMname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("EPO_MNAME");

                    b.Property<int?>("EpoSalute")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_SALUTE");

                    b.Property<int?>("EpoStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_STATUS");

                    b.HasIndex(new[] { "EpoCode" }, "xml_EMPNDX");

                    b.ToTable("xml_EMP", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlFvbal", b =>
                {
                    b.Property<double?>("Amount")
                        .HasColumnType("REAL")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("Code")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("CODE");

                    b.Property<string>("Description")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Lastupdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("LASTUPDATE");

                    b.HasIndex(new[] { "Code" }, "xml_FVBALNDX");

                    b.ToTable("xml_FVBAL", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlICogi", b =>
                {
                    b.Property<int?>("Bday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BDAY");

                    b.Property<int?>("Bmonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BMONTH");

                    b.Property<int?>("Byear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BYEAR");

                    b.Property<int?>("Corpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CORPCODE");

                    b.Property<double?>("InvAcuadjamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUADJAMT");

                    b.Property<double?>("InvAcuadjqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUADJQTY");

                    b.Property<double?>("InvAcubatamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUBATAMT");

                    b.Property<double?>("InvAcubatqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUBATQTY");

                    b.Property<double?>("InvAcubruamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUBRUAMT");

                    b.Property<double?>("InvAcubruqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUBRUQTY");

                    b.Property<double?>("InvAcudelamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUDELAMT");

                    b.Property<double?>("InvAcudelqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUDELQTY");

                    b.Property<double?>("InvAcuisuamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUISUAMT");

                    b.Property<double?>("InvAcuisuqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUISUQTY");

                    b.Property<double?>("InvAcuxfiamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUXFIAMT");

                    b.Property<double?>("InvAcuxfiqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUXFIQTY");

                    b.Property<double?>("InvAcuxfoamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUXFOAMT");

                    b.Property<double?>("InvAcuxfoqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUXFOQTY");

                    b.Property<double?>("InvAdjamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ADJAMT");

                    b.Property<double?>("InvAdjqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ADJQTY");

                    b.Property<double?>("InvBatamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_BATAMT");

                    b.Property<int?>("InvBatch")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_BATCH");

                    b.Property<double?>("InvBatqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_BATQTY");

                    b.Property<double?>("InvBegamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_BEGAMT");

                    b.Property<double?>("InvBegqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_BEGQTY");

                    b.Property<double?>("InvBruamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_BRUAMT");

                    b.Property<double?>("InvBruqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_BRUQTY");

                    b.Property<double?>("InvCostlast")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_COSTLAST");

                    b.Property<double?>("InvCostma")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_COSTMA");

                    b.Property<double?>("InvDelamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_DELAMT");

                    b.Property<double?>("InvDelqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_DELQTY");

                    b.Property<double?>("InvEndamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ENDAMT");

                    b.Property<double?>("InvEndqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ENDQTY");

                    b.Property<double?>("InvIsuamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ISUAMT");

                    b.Property<double?>("InvIsuqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ISUQTY");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<double?>("InvVaramt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_VARAMT");

                    b.Property<double?>("InvVarqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_VARQTY");

                    b.Property<double?>("InvXfiamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_XFIAMT");

                    b.Property<double?>("InvXfiqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_XFIQTY");

                    b.Property<double?>("InvXfoamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_XFOAMT");

                    b.Property<double?>("InvXfoqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_XFOQTY");

                    b.Property<int?>("Sitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SITECODE");

                    b.HasIndex(new[] { "InvItemcodex" }, "xml_I_COGINDX");

                    b.ToTable("xml_I_COGI", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlICogp", b =>
                {
                    b.Property<int?>("Bday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BDAY");

                    b.Property<int?>("Bmonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BMONTH");

                    b.Property<int?>("Byear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BYEAR");

                    b.Property<int?>("Corpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CORPCODE");

                    b.Property<double?>("InvIsuamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ISUAMT");

                    b.Property<double?>("InvIsuqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ISUQTY");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvNozzle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_NOZZLE");

                    b.Property<int?>("InvPump")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_PUMP");

                    b.Property<int?>("InvTank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_TANK");

                    b.Property<double?>("InvTlzclo")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_TLZCLO");

                    b.Property<double?>("InvTlzope")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_TLZOPE");

                    b.Property<int?>("Sitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SITECODE");

                    b.HasIndex(new[] { "InvPump", "InvNozzle", "InvTank", "InvItemcodex" }, "xml_I_COGPNDX");

                    b.ToTable("xml_I_COGP", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlICogt", b =>
                {
                    b.Property<int?>("Bday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BDAY");

                    b.Property<int?>("Bmonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BMONTH");

                    b.Property<int?>("Byear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BYEAR");

                    b.Property<int?>("Corpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CORPCODE");

                    b.Property<double?>("InvAcudelamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUDELAMT");

                    b.Property<double?>("InvAcudelqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUDELQTY");

                    b.Property<double?>("InvAcuisuamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUISUAMT");

                    b.Property<double?>("InvAcuisuqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ACUISUQTY");

                    b.Property<int?>("InvBatch")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_BATCH");

                    b.Property<double?>("InvBegamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_BEGAMT");

                    b.Property<double?>("InvBegqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_BEGQTY");

                    b.Property<double?>("InvCostlast")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_COSTLAST");

                    b.Property<double?>("InvCostma")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_COSTMA");

                    b.Property<double?>("InvDelamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_DELAMT");

                    b.Property<double?>("InvDelqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_DELQTY");

                    b.Property<double?>("InvEndamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ENDAMT");

                    b.Property<double?>("InvEndqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ENDQTY");

                    b.Property<double?>("InvIsuamt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ISUAMT");

                    b.Property<double?>("InvIsuqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_ISUQTY");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvTank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_TANK");

                    b.Property<double?>("InvVaramt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_VARAMT");

                    b.Property<double?>("InvVarqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_VARQTY");

                    b.Property<double?>("InvWtramt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_WTRAMT");

                    b.Property<double?>("InvWtrqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_WTRQTY");

                    b.Property<int?>("Sitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SITECODE");

                    b.HasIndex(new[] { "InvTank", "InvItemcodex" }, "xml_I_COGTNDX");

                    b.ToTable("xml_I_COGT", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlIIfifo", b =>
                {
                    b.Property<int?>("Bday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BDAY");

                    b.Property<int?>("Bmonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BMONTH");

                    b.Property<int?>("Byear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BYEAR");

                    b.Property<int?>("Corpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CORPCODE");

                    b.Property<string>("InvAccount")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("INV_ACCOUNT");

                    b.Property<double?>("InvAmt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_AMT");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvPos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_POS");

                    b.Property<double?>("InvQty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_QTY");

                    b.Property<int?>("InvSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_SOURCE");

                    b.Property<string>("InvStamp")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("INV_STAMP");

                    b.Property<double?>("InvUsed")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_USED");

                    b.Property<int?>("Sitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SITECODE");

                    b.HasIndex(new[] { "InvStamp", "InvPos" }, "xml_I_IFIFONDX");

                    b.ToTable("xml_I_IFIFO", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlIWfifo", b =>
                {
                    b.Property<int?>("Bday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BDAY");

                    b.Property<int?>("Bmonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BMONTH");

                    b.Property<int?>("Byear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BYEAR");

                    b.Property<int?>("Corpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CORPCODE");

                    b.Property<string>("InvAccount")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("INV_ACCOUNT");

                    b.Property<double?>("InvAmt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_AMT");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<int?>("InvPos")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_POS");

                    b.Property<double?>("InvQty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_QTY");

                    b.Property<int?>("InvSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_SOURCE");

                    b.Property<string>("InvStamp")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("INV_STAMP");

                    b.Property<int?>("InvTank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_TANK");

                    b.Property<double?>("InvUsed")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_USED");

                    b.Property<int?>("Sitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SITECODE");

                    b.HasIndex(new[] { "InvStamp", "InvPos" }, "xml_I_WFIFONDX");

                    b.ToTable("xml_I_WFIFO", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlIXpldi", b =>
                {
                    b.Property<int?>("Bday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BDAY");

                    b.Property<int?>("Bmonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BMONTH");

                    b.Property<int?>("Byear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BYEAR");

                    b.Property<int?>("Corpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CORPCODE");

                    b.Property<string>("InvAccount")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("INV_ACCOUNT");

                    b.Property<double?>("InvAmt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_AMT");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<double?>("InvQty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_QTY");

                    b.Property<int?>("InvSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_SOURCE");

                    b.Property<int?>("InvTtltype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_TTLTYPE");

                    b.Property<int?>("Sitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SITECODE");

                    b.HasIndex(new[] { "InvSource", "InvAccount", "InvTtltype", "InvItemcodex" }, "xml_I_XPLDINDX");

                    b.ToTable("xml_I_XPLDI", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlIXpldr", b =>
                {
                    b.Property<int?>("Bday")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BDAY");

                    b.Property<int?>("Bmonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BMONTH");

                    b.Property<int?>("Byear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BYEAR");

                    b.Property<int?>("Corpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CORPCODE");

                    b.Property<string>("InvAccount")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("INV_ACCOUNT");

                    b.Property<double?>("InvAmt")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_AMT");

                    b.Property<double?>("InvFifoqty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_FIFOQTY");

                    b.Property<string>("InvItemcodex")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_ITEMCODEX");

                    b.Property<double?>("InvQty")
                        .HasColumnType("REAL")
                        .HasColumnName("INV_QTY");

                    b.Property<string>("InvRawmat")
                        .HasColumnType("CHAR(18)")
                        .HasColumnName("INV_RAWMAT");

                    b.Property<int?>("InvSource")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_SOURCE");

                    b.Property<int?>("InvTtltype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("INV_TTLTYPE");

                    b.Property<int?>("Sitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SITECODE");

                    b.HasIndex(new[] { "InvSource", "InvAccount", "InvTtltype", "InvItemcodex", "InvRawmat" }, "xml_I_XPLDRNDX");

                    b.ToTable("xml_I_XPLDR", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlSite", b =>
                {
                    b.Property<string>("EpoBhf")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("EPO_BHF");

                    b.Property<string>("EpoBht")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("EPO_BHT");

                    b.Property<string>("EpoDescription")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("EPO_DESCRIPTION");

                    b.Property<string>("EpoHqcode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("EPO_HQCODE");

                    b.Property<string>("EpoSitecode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("EPO_SITECODE");

                    b.HasIndex(new[] { "EpoHqcode", "EpoSitecode" }, "xml_SITENDX");

                    b.ToTable("xml_SITE", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlSysUser", b =>
                {
                    b.Property<string>("EpoCode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("EPO_CODE");

                    b.Property<string>("EpoPassword")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("EPO_PASSWORD");

                    b.Property<int?>("EpoSecurity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_SECURITY");

                    b.Property<string>("EpoUsername")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("EPO_USERNAME");

                    b.Property<int?>("EpoUsertype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EPO_USERTYPE");

                    b.HasIndex(new[] { "EpoCode" }, "xml_SYS_USERNDX");

                    b.ToTable("xml_SYS_USER", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XmlUserinfo", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Firstname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<string>("Lastname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("LASTNAME");

                    b.Property<string>("UserCode")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("USER_CODE");

                    b.Property<string>("Webid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("WEBID");

                    b.Property<string>("Webpass")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("WEBPASS");

                    b.HasIndex(new[] { "UserCode" }, "xml_USERINFONDX");

                    b.ToTable("xml_USERINFO", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}

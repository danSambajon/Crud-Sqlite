// <auto-generated />
using System;
using Crud_Sqlite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Crud_Sqlite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240424014447_updateFuels")]
    partial class updateFuels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Crud_Sqlite.Models.Abnormalities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Abnormality")
                        .HasColumnType("REAL");

                    b.Property<double>("Closing")
                        .HasColumnType("REAL");

                    b.Property<double>("ClosingZip")
                        .HasColumnType("REAL");

                    b.Property<string>("INV_DATE")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Opening")
                        .HasColumnType("REAL");

                    b.Property<double>("OpeningZip")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Short")
                        .HasColumnType("REAL");

                    b.Property<int>("XPump")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Abnormalities");
                });

            modelBuilder.Entity("Crud_Sqlite.Models.DbBackup", b =>
                {
                    b.Property<string>("PosBitmap")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PosCode")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosColor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosFcode")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosFlag")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosFntcolor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PosFntname")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PosFntsize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosFntstyle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosHeight")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosLeft")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosSecurity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosSfcode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PosTaskcode")
                        .HasColumnType("TEXT");

                    b.Property<string>("PosText")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PosTop")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PosWidth")
                        .HasColumnType("INTEGER");

                    b.ToTable("DbBackups");
                });

            modelBuilder.Entity("Crud_Sqlite.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XAddon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("XAccountcode")
                        .HasColumnType("TEXT");

                    b.Property<double?>("XAmountdue")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("XRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("XStamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("XAddon");
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcAccount")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcAmtbal")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcCardname")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcCardno")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcCorpcode")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcDatetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcDaylimit")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcExpire")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcFlag")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcLimit")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcPdatetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcPsitecode")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcPump")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcPvalue")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcPxtype")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcReqvalue")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcSeries")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcSitecode")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcVolbal")
                        .HasColumnType("TEXT");

                    b.Property<string>("XMcXtype")
                        .HasColumnType("TEXT");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("XCards");
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("XAccountcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xACCOUNTCODE");

                    b.Property<double?>("XAmount1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNT1");

                    b.Property<double?>("XAmount2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNT2");

                    b.Property<double?>("XAmountdue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNTDUE");

                    b.Property<double?>("XAmt1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmt1");

                    b.Property<double?>("XAmt2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmt2");

                    b.Property<double?>("XAmt3")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmt3");

                    b.Property<string>("XApiflag")
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("xAPIFLAG");

                    b.Property<string>("XByte1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xBYTE1");

                    b.Property<string>("XByte2")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xBYTE2");

                    b.Property<double?>("XChangedue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCHANGEDUE");

                    b.Property<string>("XCkBankname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCK_BANKNAME");

                    b.Property<string>("XCkCheckno")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCK_CHECKNO");

                    b.Property<int?>("XControlno")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xCONTROLNO");

                    b.Property<int?>("XControlr")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xCONTROLR");

                    b.Property<string>("XCurrsym")
                        .HasColumnType("CHAR(12)")
                        .HasColumnName("xCURRSYM");

                    b.Property<string>("XCustomfield1")
                        .HasColumnType("CHAR(40)")
                        .HasColumnName("xCUSTOMFIELD1");

                    b.Property<string>("XDescription")
                        .HasColumnType("CHAR(32)")
                        .HasColumnName("xDESCRIPTION");

                    b.Property<double?>("XDword1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xDWORD1");

                    b.Property<double?>("XDword2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xDWORD2");

                    b.Property<int?>("XFindex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xFINDEX");

                    b.Property<string>("XFlag")
                        .HasColumnType("CHAR(13)")
                        .HasColumnName("xFLAG");

                    b.Property<double?>("XForex")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xFOREX");

                    b.Property<string>("XFormat")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("xFORMAT");

                    b.Property<string>("XFtype")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("xFType");

                    b.Property<string>("XGcSerialno")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xGC_SERIALNO");

                    b.Property<int?>("XGuestcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xGUESTCOUNT");

                    b.Property<string>("XItemcodex")
                        .HasColumnType("char(17)")
                        .HasColumnName("xITEMCODEX");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<double?>("XMaxamt")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xMAXAMT");

                    b.Property<double?>("XMaxqty")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xMAXQTY");

                    b.Property<double?>("XQty1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xQty1");

                    b.Property<double?>("XQty2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xQty2");

                    b.Property<double?>("XReal1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xREAL1");

                    b.Property<double?>("XReal2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xREAL2");

                    b.Property<double?>("XRoundamt")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xROUNDAMT");

                    b.Property<int?>("XSrcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSRCOUNT");

                    b.Property<string>("XStamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMP");

                    b.Property<string>("XTaskcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKCODE");

                    b.Property<string>("XTasktype")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKTYPE");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.Property<double?>("XTotalamount")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xTOTALAMOUNT");

                    b.Property<double?>("XTotalamountdue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xTOTALAMOUNTDUE");

                    b.Property<double?>("XTransactiondue")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xTRANSACTIONDUE");

                    b.Property<string>("XTstamp")
                        .HasColumnType("char(20)")
                        .HasColumnName("xTSTAMP");

                    b.Property<double?>("XUsedamt")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xUSEDAMT");

                    b.Property<double?>("XUsedqty")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xUSEDQTY");

                    b.Property<double?>("XWord1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xWORD1");

                    b.Property<double?>("XWord2")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xWORD2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XTid" }, "xFunctionIDX");

                    b.ToTable("xFunctions", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<double?>("XAddon")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xADDON");

                    b.Property<double?>("XAmount")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAMOUNT");

                    b.Property<double?>("XAmountDb")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmountDB");

                    b.Property<double?>("XAmountPaid")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmountPaid");

                    b.Property<double?>("XAmt1")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xAmt1");

                    b.Property<string>("XApiflag")
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("xAPIFLAG");

                    b.Property<string>("XBarcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xBARCODE");

                    b.Property<double?>("XBaseprice")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xBASEPRICE");

                    b.Property<string>("XCid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCID");

                    b.Property<double?>("XClosetotal")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCLOSETOTAL");

                    b.Property<string>("XCname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xCNAME");

                    b.Property<string>("XControlflag")
                        .HasColumnType("CHAR(11)")
                        .HasColumnName("xCONTROLFLAG");

                    b.Property<double?>("XCoupon")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCOUPON");

                    b.Property<double?>("XCut")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xCUT");

                    b.Property<string>("XDescription")
                        .HasColumnType("CHAR(32)")
                        .HasColumnName("xDESCRIPTION");

                    b.Property<double?>("XDiscount")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xDISCOUNT");

                    b.Property<int?>("XDrtable")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xDRTABLE");

                    b.Property<string>("XFormat")
                        .HasColumnType("CHAR(14)")
                        .HasColumnName("xFORMAT");

                    b.Property<int?>("XGuestcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xGUESTCOUNT");

                    b.Property<string>("XInvcode")
                        .HasColumnType("CHAR(15)")
                        .HasColumnName("xINVCODE");

                    b.Property<string>("XItemcode")
                        .HasColumnType("CHAR(16)")
                        .HasColumnName("xITEMCODE");

                    b.Property<string>("XItemcodex")
                        .HasColumnType("CHAR(17)")
                        .HasColumnName("xITEMCODEX");

                    b.Property<int?>("XItemflag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xITEMFLAG");

                    b.Property<int?>("XItemflagx")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xITEMFLAGX");

                    b.Property<string>("XItemkind")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xITEMKIND");

                    b.Property<string>("XItemtype")
                        .HasColumnType("CHAR(19)")
                        .HasColumnName("xITEMTYPE");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<double?>("XMaxcond")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xMAXCOND");

                    b.Property<double?>("XMincond")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xMINCOND");

                    b.Property<string>("XModgroup")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xMODGROUP");

                    b.Property<string>("XNounflag")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xNOUNFLAG");

                    b.Property<int?>("XNozzle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xNOZZLE");

                    b.Property<string>("XNzstamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xNZSTAMP");

                    b.Property<double?>("XOpentotal")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xOPENTOTAL");

                    b.Property<double?>("XPoints")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xPOINTS");

                    b.Property<double?>("XPrice")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xPRICE");

                    b.Property<string>("XPricecode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xPRICECODE");

                    b.Property<double?>("XPricedb")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xPRICEDB");

                    b.Property<string>("XPriceflag")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xPRICEFLAG");

                    b.Property<int?>("XPromoindex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPROMOINDEX");

                    b.Property<int?>("XPstid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPSTID");

                    b.Property<int?>("XPump")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPUMP");

                    b.Property<int?>("XPumpflag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPUMPFLAG");

                    b.Property<double?>("XQuantity")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xQUANTITY");

                    b.Property<int?>("XRoutecolumn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xROUTECOLUMN");

                    b.Property<string>("XSeatid")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xSEATID");

                    b.Property<string>("XSerialnumber")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSERIALNUMBER");

                    b.Property<string>("XSid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSID");

                    b.Property<string>("XSname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSNAME");

                    b.Property<string>("XStamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMP");

                    b.Property<string>("XStampdown")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMPDOWN");

                    b.Property<string>("XStampup")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMPUP");

                    b.Property<int?>("XStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSTATUS");

                    b.Property<string>("XTable")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTABLE");

                    b.Property<int?>("XTank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTANK");

                    b.Property<string>("XTaskcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKCODE");

                    b.Property<string>("XTasktype")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTASKTYPE");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.Property<double?>("XTotalVariance")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xTotalVariance");

                    b.Property<int?>("XTotaltype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTOTALTYPE");

                    b.Property<string>("XTotaltypename")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTOTALTYPENAME");

                    b.Property<int?>("XUom")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xUOM");

                    b.Property<string>("XVehicleplateno")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xVEHICLEPLATENO");

                    b.Property<string>("XVehicletype")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xVEHICLETYPE");

                    b.Property<string>("XVipCode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CODE");

                    b.Property<string>("XVipF01")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F01");

                    b.Property<string>("XVipF02")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F02");

                    b.Property<string>("XVipF03")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F03");

                    b.Property<string>("XVipF04")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F04");

                    b.Property<string>("XVipF05")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_F05");

                    b.Property<string>("XVipFname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_FNAME");

                    b.Property<string>("XVipLname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_LNAME");

                    b.Property<string>("XVipMname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_MNAME");

                    b.Property<double?>("XYield")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xYIELD");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XApiflag" }, "iItemsA");

                    b.HasIndex(new[] { "XClosetotal" }, "iItemsC");

                    b.HasIndex(new[] { "XTid" }, "iItemsID");

                    b.HasIndex(new[] { "XItemcode" }, "iItemsIT");

                    b.HasIndex(new[] { "XOpentotal" }, "iItemsO");

                    b.HasIndex(new[] { "XPump" }, "iItemsP");

                    b.HasIndex(new[] { "XStamp" }, "iItemsS");

                    b.HasIndex(new[] { "XTank" }, "iItemsT");

                    b.HasIndex(new[] { "XTid" }, "xItemIDX");

                    b.ToTable("xItems", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XOffline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("XAfterInvoice")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("XAfterStamp")
                        .HasColumnType("TEXT");

                    b.Property<double?>("XAmount")
                        .HasColumnType("REAL");

                    b.Property<int?>("XBatch")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("XBdate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("XBeforeInvoice")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("XBeforeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("XCashier")
                        .HasColumnType("TEXT");

                    b.Property<string>("XCashierCode")
                        .HasColumnType("TEXT");

                    b.Property<double?>("XCloseTotalizer")
                        .HasColumnType("REAL");

                    b.Property<string>("XItemCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("XItemName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("XNozzle")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("XOpenTotalizer")
                        .HasColumnType("REAL");

                    b.Property<double?>("XOrigOpenTotal")
                        .HasColumnType("REAL");

                    b.Property<int?>("XPumpNo")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("XQuantity")
                        .HasColumnType("REAL");

                    b.Property<int?>("XTankNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("XTotalType")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("XUnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("XOfflines");
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("XBatch")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xBATCH");

                    b.Property<int?>("XCorpcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xCORPCODE");

                    b.Property<int?>("XDay")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xDAY");

                    b.Property<int?>("XDiscountmethod")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xDISCOUNTMETHOD");

                    b.Property<string>("XFlag")
                        .HasColumnType("CHAR(13)")
                        .HasColumnName("xFLAG");

                    b.Property<string>("XFld001")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("xFLD001");

                    b.Property<int?>("XGuestcount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xGUESTCOUNT");

                    b.Property<int?>("XHqcode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xHQCODE");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<int?>("XMonth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xMONTH");

                    b.Property<string>("XOdometer")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xODOMETER");

                    b.Property<string>("XOid")
                        .HasColumnType("CHAR(10)")
                        .HasColumnName("xOID");

                    b.Property<string>("XOname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xONAME");

                    b.Property<string>("XPricecode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xPRICECODE");

                    b.Property<int?>("XPromoindex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPROMOINDEX");

                    b.Property<string>("XPropertytag")
                        .HasColumnType("CHAR(60)")
                        .HasColumnName("xPROPERTYTAG");

                    b.Property<int?>("XPstid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xPSTID");

                    b.Property<int?>("XRoutecolumn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xROUTECOLUMN");

                    b.Property<int?>("XRsn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xRSN");

                    b.Property<int?>("XRtn")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xRTN");

                    b.Property<int?>("XSequence")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSEQUENCE");

                    b.Property<int?>("XShift")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSHIFT");

                    b.Property<int?>("XSitecode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xSITECODE");

                    b.Property<string>("XSrcount")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSRCOUNT");

                    b.Property<string>("XStamp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMP");

                    b.Property<string>("XStampfi")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMPFI");

                    b.Property<string>("XStamplt")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xSTAMPLT");

                    b.Property<string>("XTable")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTABLE");

                    b.Property<string>("XTent")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTENT");

                    b.Property<string>("XTicketId")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTicketID");

                    b.Property<int?>("XTotaltype")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTOTALTYPE");

                    b.Property<string>("XTotaltypename")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xTOTALTYPENAME");

                    b.Property<int?>("XTransaction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTRANSACTION");

                    b.Property<double?>("XVoidtransaction")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("xVOIDTRANSACTION");

                    b.Property<int?>("XYear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xYEAR");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XCorpcode" }, "iTicketsC");

                    b.HasIndex(new[] { "XDay" }, "iTicketsD");

                    b.HasIndex(new[] { "XTicketId" }, "iTicketsID");

                    b.HasIndex(new[] { "XMonth" }, "iTicketsM");

                    b.HasIndex(new[] { "XSitecode" }, "iTicketsS");

                    b.HasIndex(new[] { "XYear" }, "iTicketsY");

                    b.ToTable("xTickets", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.XVip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("XLastUpdate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("xLastUpdate");

                    b.Property<int?>("XTid")
                        .HasColumnType("INTEGER")
                        .HasColumnName("xTid");

                    b.Property<string>("XVipApc")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_APC");

                    b.Property<string>("XVipBario")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_BARIO");

                    b.Property<string>("XVipCardlabel")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CARDLABEL");

                    b.Property<string>("XVipCardname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CARDNAME");

                    b.Property<string>("XVipCity")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CITY");

                    b.Property<string>("XVipCode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CODE");

                    b.Property<string>("XVipCode2")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_CODE2");

                    b.Property<string>("XVipFname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_FNAME");

                    b.Property<string>("XVipHseno")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_HSENO");

                    b.Property<string>("XVipLname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_LNAME");

                    b.Property<string>("XVipMid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_MID");

                    b.Property<string>("XVipMname")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_MNAME");

                    b.Property<string>("XVipPcode")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PCODE");

                    b.Property<string>("XVipPtsa")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PTSA");

                    b.Property<string>("XVipPtse")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PTSE");

                    b.Property<string>("XVipPtsp")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PTSP");

                    b.Property<string>("XVipPtsr")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_PTSR");

                    b.Property<string>("XVipRef")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_REF");

                    b.Property<string>("XVipSalute")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_SALUTE");

                    b.Property<string>("XVipStreet")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_STREET");

                    b.Property<string>("XVipTid")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_TID");

                    b.Property<string>("XVipTin")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_TIN");

                    b.Property<string>("XVipZip")
                        .HasColumnType("CHAR(20)")
                        .HasColumnName("xVIP_ZIP");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "XTid" }, "xVIPIDX");

                    b.ToTable("xVIP", (string)null);
                });

            modelBuilder.Entity("Crud_Sqlite.Models.xFuelsWithPO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Calibration")
                        .HasColumnType("REAL");

                    b.Property<double>("Closing")
                        .HasColumnType("REAL");

                    b.Property<double>("Cust")
                        .HasColumnType("REAL");

                    b.Property<TimeOnly?>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("INV_DATE")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("InTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Liters")
                        .HasColumnType("REAL");

                    b.Property<double>("Opening")
                        .HasColumnType("REAL");

                    b.Property<TimeOnly>("OutTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Particulars")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Shift")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("Start")
                        .HasColumnType("TEXT");

                    b.Property<int>("Transcount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Volume")
                        .HasColumnType("REAL");

                    b.Property<double>("XAmount")
                        .HasColumnType("REAL");

                    b.Property<double>("XAmountDb")
                        .HasColumnType("REAL");

                    b.Property<int>("XCorpcode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XDay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("XItemcode")
                        .HasColumnType("TEXT");

                    b.Property<int>("XMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XNozzle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("XOid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("XOname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("XPump")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XSitecode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XTank")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XTransaction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nozdown")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("preInTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("preOutTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FuelsWithPOs");
                });
#pragma warning restore 612, 618
        }
    }
}
